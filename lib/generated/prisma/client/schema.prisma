generator client {
  provider = "prisma-client-js" // Spécifie le générateur de client Prisma
  output   = "../lib/generated/prisma/client" // Chemin de sortie pour le client généré
}

datasource db {
  provider = "sqlite" // Fournisseur de la base de données (SQLite)
  url      = env("DATABASE_URL") // URL de connexion à la base, tirée des variables d'environnement
}

enum Role {
  USER // Utilisateur standard avec droits limités
  READER // Utilisateur avec droits de lecture uniquement
  AUTHOR // Utilisateur pouvant créer du contenu
  DEV // Développeur avec droits techniques
  ADMIN // Administrateur avec tous les droits
}

enum Status {
  TODO // Tâche/projet/sprint à faire
  IN_PROGRESS // Tâche/projet/sprint en cours
  REVIEW // Tâche/projet/sprint en revue
  DONE // Tâche/projet/sprint terminé
  BLOCKED // Tâche/projet/sprint bloqué
  CANCELLED // Tâche/projet/sprint annulé
}

enum FileType {
  DOCUMENT // Fichier de type document (ex. PDF, Word)
  IMAGE // Fichier de type image (ex. JPG, PNG)
  SPREADSHEET // Fichier de type tableur (ex. Excel)
  PRESENTATION // Fichier de type présentation (ex. PowerPoint)
  ARCHIVE // Fichier de type archive (ex. ZIP)
  CODE // Fichier de type code source
  OTHER // Autre type de fichier
}

enum ActionType {
  CREATE // Action de création
  UPDATE // Action de mise à jour
  DELETE // Action de suppression
}

enum RelationType {
  IMPORT // Importation d'un fichier (ex. import dans du code)
  REFERENCE // Référence à un fichier (ex. lien logique)
  OTHER // Autre type de relation
}

model User {
  id            String   @id @default(uuid()) // Identifiant unique de l'utilisateur
  name          String? // Nom de l'utilisateur (optionnel)
  email         String?  @unique // Email unique de l'utilisateur (optionnel)
  emailVerified Boolean  @default(false) // Indique si l'email est vérifié
  image         String? // URL de l'image de profil (optionnel)
  role          Role     @default(USER) // Rôle de l'utilisateur dans l'application
  lang          String?  @default("en") // Langue préférée de l'utilisateur
  createdAt     DateTime @default(now()) // Date de création du compte
  updatedAt     DateTime @updatedAt // Date de dernière mise à jour du compte

  sessions      Session[] // Sessions actives de l'utilisateur
  accounts      Account[] // Comptes d'authentification liés
  memberships   Member[] // Projets auxquels l'utilisateur est membre
  verifications Verification[] // Vérifications associées à l'utilisateur
  Profile       Profile[]

  @@index([email]) // Index sur l'email pour des recherches rapides
  @@map("user") // Nom de la table dans la base de données
}

model Session {
  id        String   @id @default(uuid()) // Identifiant unique de la session
  userId    String // ID de l'utilisateur associé
  token     String   @unique // Jeton unique de la session
  expiresAt DateTime // Date d'expiration de la session
  ipAddress String? // Adresse IP de connexion (optionnel)
  userAgent String? // Agent utilisateur du navigateur (optionnel)
  createdAt DateTime @default(now()) // Date de création de la session
  updatedAt DateTime @updatedAt // Date de dernière mise à jour de la session

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation avec l'utilisateur, suppression en cascade

  @@map("session") // Nom de la table dans la base de données
}

model Account {
  id                    String    @id @default(uuid()) // Identifiant unique du compte
  userId                String // ID de l'utilisateur associé
  accountId             String // ID du compte chez le fournisseur
  providerId            String // Identifiant du fournisseur (ex. Google, GitHub)
  accessToken           String? // Jeton d'accès OAuth (optionnel)
  refreshToken          String? // Jeton de rafraîchissement OAuth (optionnel)
  accessTokenExpiresAt  DateTime? // Date d'expiration du jeton d'accès
  refreshTokenExpiresAt DateTime? // Date d'expiration du jeton de rafraîchissement
  scope                 String? // Portée des autorisations OAuth
  idToken               String? // Jeton d'identité OAuth
  password              String? // Mot de passe haché (pour authentification locale)
  createdAt             DateTime  @default(now()) // Date de création du compte
  updatedAt             DateTime  @updatedAt // Date de dernière mise à jour du compte

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation avec l'utilisateur, suppression en cascade

  @@map("account") // Nom de la table dans la base de données
}

model Verification {
  id         String   @id @default(uuid()) // Identifiant unique de la vérification
  identifier String // Identifiant à vérifier (ex. email)
  value      String // Valeur de vérification (ex. token)
  expiresAt  DateTime // Date d'expiration du token
  createdAt  DateTime @default(now()) // Date de création de la vérification
  updatedAt  DateTime @updatedAt // Date de dernière mise à jour de la vérification

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Utilisateur associé
  userId String // ID de l'utilisateur

  @@map("verification") // Nom de la table dans la base de données
}

//
// ============================
// 2. Onboarding utilisateur
// ============================
model Profile {
  id                String    @id @default(uuid())
  firstName         String
  lastName          String
  dateOfBirth       DateTime?
  languagePreferred String    @default("en")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  Member[]
  teams    Team[]
  projects Project[]

  @@map("organizations")
}

model Member {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  joinedAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  teams    Team[]    @relation("TeamMembers")
  projects Project[] @relation("ProjectMembers")

  @@unique([userId, organizationId])
  @@map("members")
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  members        Member[]     @relation("TeamMembers")

  @@map("teams")
}

//
// ============================
// 3. Métier
// ============================

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  image       String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  members        Member[]     @relation("ProjectMembers")

  @@index([name])
  @@map("projects")
}
